/* tslint:disable */
/* eslint-disable */
/**
 * onecx-extensions-bff
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProblemDetailInvalidParam } from './ProblemDetailInvalidParam';
import {
  ProblemDetailInvalidParamFromJSON,
  ProblemDetailInvalidParamFromJSONTyped,
  ProblemDetailInvalidParamToJSON,
} from './ProblemDetailInvalidParam';
import type { ProblemDetailParam } from './ProblemDetailParam';
import {
  ProblemDetailParamFromJSON,
  ProblemDetailParamFromJSONTyped,
  ProblemDetailParamToJSON,
} from './ProblemDetailParam';

/**
 *
 * @export
 * @interface ProblemDetailResponse
 */
export interface ProblemDetailResponse {
  /**
   *
   * @type {string}
   * @memberof ProblemDetailResponse
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof ProblemDetailResponse
   */
  detail?: string;
  /**
   *
   * @type {Array<ProblemDetailParam>}
   * @memberof ProblemDetailResponse
   */
  params?: Array<ProblemDetailParam>;
  /**
   *
   * @type {Array<ProblemDetailInvalidParam>}
   * @memberof ProblemDetailResponse
   */
  invalidParams?: Array<ProblemDetailInvalidParam>;
}

/**
 * Check if a given object implements the ProblemDetailResponse interface.
 */
export function instanceOfProblemDetailResponse(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ProblemDetailResponseFromJSON(
  json: any
): ProblemDetailResponse {
  return ProblemDetailResponseFromJSONTyped(json, false);
}

export function ProblemDetailResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ProblemDetailResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    errorCode: !exists(json, 'errorCode') ? undefined : json['errorCode'],
    detail: !exists(json, 'detail') ? undefined : json['detail'],
    params: !exists(json, 'params')
      ? undefined
      : (json['params'] as Array<any>).map(ProblemDetailParamFromJSON),
    invalidParams: !exists(json, 'invalidParams')
      ? undefined
      : (json['invalidParams'] as Array<any>).map(
          ProblemDetailInvalidParamFromJSON
        ),
  };
}

export function ProblemDetailResponseToJSON(
  value?: ProblemDetailResponse | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    errorCode: value.errorCode,
    detail: value.detail,
    params:
      value.params === undefined
        ? undefined
        : (value.params as Array<any>).map(ProblemDetailParamToJSON),
    invalidParams:
      value.invalidParams === undefined
        ? undefined
        : (value.invalidParams as Array<any>).map(
            ProblemDetailInvalidParamToJSON
          ),
  };
}
